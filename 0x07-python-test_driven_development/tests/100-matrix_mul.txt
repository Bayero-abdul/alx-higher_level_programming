100-matrix_mul test
====================

	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
	>>> matrix_mul()
	Traceback (most recent call last):
		...
	TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

	>>> matrix_mul([[1, 3], [3, 4]])
	Traceback (most recent call last):
		...
	TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

	>>> matrix_mul(4, [[1, 3], [4, 6]])
	Traceback (most recent call last):
		...
	TypeError: m_a must be a list

	>>> matrix_mul([[1, 4], [5, 3]], "set")
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list

	>>> matrix_mul([4, 6], [[1, 4], [34, 6]])
	Traceback (most recent call last):
		...
	TypeError: m_a must be a list of lists

	>>> matrix_mul([[3, 5], [3, 6]], [6, 8])
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list of lists

	>>> matrix_mul([[], []], [[4], [5]])
	Traceback (most recent call last):
		...
	ValueError: m_a can't be empty

	>>> matrix_mul([[]], [[4], [5]])
	Traceback (most recent call last):
		...
	ValueError: m_a can't be empty

	>>> matrix_mul([[4], [5]], [[]])
	Traceback (most recent call last):
		...
	ValueError: m_b can't be empty

	>>> matrix_mul([[4, 5], [5, 7]], [[6, 7], []])
	Traceback (most recent call last):
		...
	ValueError: m_b can't be empty

	>>> matrix_mul([[3, "hello"], ["t", 7]], [[1, 5], [5, 6]])
	Traceback (most recent call last):
		...
	TypeError: m_a should contain only integers or floats

	>>> matrix_mul([[5, "6"], [7, 8]], [[5, 6], [7, 8]])
	Traceback (most recent call last):
		...
	TypeError: m_a should contain only integers or floats

	>>> matrix_mul([[5, 6], [7, 8]], [[5, "6"], [7, 8]])
	Traceback (most recent call last):
		...
	TypeError: m_b should contain only integers or floats
	
	>>> matrix_mul([[1, 5.5], [5, 6]], [[3, 5], [7, {1: 4}]])
	Traceback (most recent call last):
		...
	TypeError: m_b should contain only integers or floats

	>>> matrix_mul([[4, 6], [6, 7, 8]], [[4, 6], [6, 7]])
	Traceback (most recent call last):
		...
	TypeError: each row of m_a must be of the same size

	>>> matrix_mul([[5, 1], [6, 7]], [[4, 2], [6, 7, 2]])
	Traceback (most recent call last):
		...
	TypeError: each row of m_b must be of the same size

	>>> matrix_mul([[5, 6, 5], [3, 6, 2]], [[1, 6, 6], [6, 3, 0]])
	Traceback (most recent call last):
		...
	ValueError: m_a and m_b can't be multiplied

	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	[[7, 10], [15, 22]]

	>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
	[[13, 16]]
	
	>>> matrix_mul([[-1, -4], [-7, -3]], [[0, -7], [-2, -6]])
	[[8, 31], [6, 67]]

	>>> matrix_mul([[1.5, -7.5]], [[-6.3, 5.3], [-4.2, 6.2]])
	[[22.05, -38.55]]
